<html lang="en">

<head>
  <%- include ("common/head.ejs") %>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <title>Document</title>
  <style>
    body {
      margin: 0;
    }

    canvas {
      width: 100%;
      height: 100%;
    }

    #loading {
      width: 100vw;
      height: 100vh;
      background-color: white;
      position: absolute;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #header {
      width: calc(100vw);
      padding: 30px;
      display: flex;
      justify-content: space-between;
      position: absolute;
    }

    #footer {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 300px;
      height: 300px;
      background-color: rgba(0, 0, 0, 0.618);
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      color: white;
    }

    #footer__title {
      font-size: 25px;
      margin-bottom: 20px;
      font-weight: bold;
    }

    #footer__content span {
      display: block;
      margin-bottom: 10px;
    }

    .time {
      font-size: 50px;
      font-weight: bold;
      color: white;
    }
  </style>
</head>

<body>
  <div id="loading">Loading......</div>
  <div id="header">
    <div class="header__left">
      <div>
        speed : <input type="range" min="0" max="0.2" step="0.01" value="0.01" id="sun__speed">
      </div>
      <div>
        distance : <input type="range" min="0" max="200" step="0.01" id="sun__distance">
      </div>
      <div>
        position : <input type="range" min="0" max="6.28" step="0.01" id="sun__location">
      </div>
    </div>
    <div class="time">
      <span id="time__hour">1</span>
      <span>:</span>
      <span id="time__min">00</span>
    </div>
    <div class="header__right">
      <button class="button is-primary is-rounded" id="zoom__in">+</button>
      <button class="button is-primary is-rounded" id="zoom__out">-</button>
    </div>
  </div>
  <div id="footer">
    <div id="footer__title">
      Instructions for operation
    </div>
    <div id="footer__content">
      <span>
        Mouse Wheel :<br> camera z position
      </span>
      <span>
        mouse Click and Move : <br>camera position rotation
      </span>
      <span>
        left top :<br> edit sun position or speed, distance
      </span>
      <span>

      </span>
    </div>
  </div>
  <script src="/js/three.js"></script>
  <script src="/js/objloader.js"></script>
  <script src="/js/MTLLoader.js"></script>
  <script src="/js/TrackballControls.js"></script>
  <script>
    var scene = new THREE.Scene();
    var camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    var zoomRate = 50;
    document
      .getElementById("zoom__in")
      .addEventListener("click", () => (zoomRate -= 1));
    document
      .getElementById("zoom__out")
      .addEventListener("click", () => (zoomRate += 1));
    var renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    var element = document.body;
    var a = 0;
    // camera.position.x = 100;
    // camera.position.y = 100;
    camera.position.z = 5;
    camera.up.set(0, 0, 1);
    camera.lookAt(0, 0, 0);
    var loader = new THREE.OBJLoader();
    var mtlLoader = new THREE.MTLLoader();
    const load = () => {
      return new Promise((resolve) => {
        mtlLoader.load(
          `http://localhost:3000/convert_file/${"<%= fileName %>".split(".")[0]
          }.mtl`,
          (materials) => {
            materials.preload();
            loader.setMaterials(materials);
            loader.load(
              // resource URL
              `http://localhost:3000/convert_file/${"<%= fileName %>".split(".")[0]
              }.obj`,
              // called when resource is loaded
              (object) => {
                document.getElementById("loading").remove();
                scene.add(object);
                resolve(object);
              },
              // called when loading is in progresses
              function (xhr) {
                console.log((xhr.loaded / xhr.total) * 100 + "% loaded");
              },
              // called when loading has errors
              function (error) {
                console.log("An error happened");
              }
            );
          }
        );
      });
    };
    // load a resource
    var light = new THREE.AmbientLight(0x505050);
    scene.add(light);

    camera.up.set(0, 0, 1000);
    camera.position.x = 10;
    camera.position.y = 10;
    let t = 9;
    let centerX = 0;
    let centerY = 0;
    let z = 10;
    var geometry = new THREE.SphereGeometry(10, 100, 100);
    var material = new THREE.MeshBasicMaterial({ color: 0xfcc203 });
    var cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    var directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.castShadow = true
    scene.add(directionalLight);


    let time = 0
    let alpha = 0.01
    let sunDistance = 100
    document.getElementById("sun__speed").addEventListener("input", e => {
      alpha = Number(e.target.value)
    })
    document.getElementById("sun__distance").addEventListener("input", e => {
      sunDistance = Number(e.target.value)
    })
    document.getElementById("sun__location").addEventListener("input", e => {
      time = Number(e.target.value)
    })
    const generateStarField = () => {
      const geometry = new THREE.Geometry();

      for (let i = 0; i < 10000; i++) {
        const star = new THREE.Vector3();
        star.x = THREE.Math.randFloatSpread(2000);
        star.y = THREE.Math.randFloatSpread(2000);
        star.z = THREE.Math.randFloatSpread(2000);
        geometry.vertices.push(star);
      }

      const material = new THREE.PointsMaterial({
        color: 0xffffff,
      });
      return new THREE.Points(geometry, material)
    }
    const starField = generateStarField()
    const whiteColor = new THREE.Color(0x50BCDF)
    const blackColor = new THREE.Color(0x000000)
    let backgroundColor = whiteColor
    const render = () => {
      scene.background = backgroundColor
      renderer.render(scene, camera);
      requestAnimationFrame(() => render());
      time += alpha
      time = time % (2 * Math.PI)
      const angle = time * 180 / Math.PI
      const realTime = ((12 + Math.floor(angle / 15)) % 24)
      document.getElementById("time__hour").innerHTML = `${realTime}`
      document.getElementById("time__min").innerHTML = `${Math.floor(60 * (angle / 15 - Math.floor(angle / 15)))}`
      if (6 <= realTime && realTime <= 18) {
        scene.remove(starField)
        backgroundColor = whiteColor
      }
      else {
        scene.add(starField)
        backgroundColor = blackColor
      }
      document.getElementById("sun__location").value = time
      cube.position.set(
        centerX + Math.sin(time) * sunDistance,
        centerY / 2,
        Math.cos(time) * sunDistance
      )
      directionalLight.position.set(
        centerX + Math.sin(time) * sunDistance,
        centerY / 2,
        Math.cos(time) * sunDistance
      )
      camera.position.set(
        centerX + Math.sin(t) * zoomRate,
        centerY / 2 + Math.cos(t) * zoomRate,
        z
      );
      camera.up.set(0, 0, 1);
      camera.lookAt(centerX, centerY, 0);
    };
    load().then((obj) => {
      render();
      const box = new THREE.Box3().setFromObject(obj);
      centerX = (box.max.x + box.min.x) / 2;
      centerY = (box.max.y + box.min.y) / 2;

      camera.position.set(
        centerX + Math.sin(t) * zoomRate,
        centerY / 2 + Math.cos(t) * zoomRate,
        z
      );
      camera.up.set(0, 0, 1);
      camera.lookAt(centerX, centerY, 0);

      const mouseDown = (e) => {
        if (e.target.tagName === "BUTTON") return;
        if (e.target.tagName === "INPUT") return;
        document.addEventListener("mousemove", mouseMove);
      };
      const mouseUp = () => {
        document.removeEventListener("mouseup", mouseUp);
        document.removeEventListener("mousemove", mouseMove);
      };
      const mouseMove = (e) => {
        t += e.movementX / 60;
        document.addEventListener("mouseup", mouseUp);
      };
      document.addEventListener("mousedown", mouseDown);
    });
    document.addEventListener("wheel", (e) => {
      e.preventDefault()
      z += (e.deltaY / 10) % 3;
    });
  </script>
</body>

</html>